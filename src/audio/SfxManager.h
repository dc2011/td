#ifndef TD_SFXMANAGER_H
#define TD_SFXMANAGER_H

#include <QStringList>

#ifndef SERVER
#    include "manager.h"
#    define PLAY_LOCAL_SFX(x)       AudioManager::instance()->playSfx(x)
#    define PLAY_LOCAL_NOTIFY(x)    AudioManager::instance()->playSfx(x, ntf)
#    define PLAY_SFX(x, y)          AudioManager::instance()->playSfx(y)
#define PLAY_NOTIFY(x, y)           AudioManager::instance()->playSfx(y, ntf)
#else
#    define PLAY_LOCAL_SFX(x)
#    define PLAY_LOCAL_NOTIFY(x)
#    define PLAY_SFX(x, y)          SfxManager::makeSfxNetworkMsg(x, y)
#    define PLAY_NOTIFY(x, y)       SfxManager::makeSfxNetworkMsg(x, y, ntf)
#endif

namespace td {

class GameObject;

/**
 * The purpose of this class is to keep all of the SFX filename info in one
 * place. Don't include the path and file extension when adding filenames in
 * the .cpp file; they will be added on in makeSfxNetworkMsg or in the audio
 * manager.
 * 
 * eg. use:
 *  "tar-1" instead of "./sound/sfx/tar-1.ogg"
 *
 * To play a SFX that should only be heard by the client who generates it, use:
 * @code
 *  PLAY_LOCAL_SFX(SfxManager::playerOpenMenu);
 * @endcode
 *
 * To play a notification (a SFX that should always be played at full gain), 
 * that should only be heard by the client who generates it, use:
 * @code
 *  PLAY_LOCAL_NOTIFY(SfxManager::towerBuildingStarted);
 * @endcode
 * 
 * To create a network message to play a sound effect generated by the server,
 * use the PLAY_SFX macro. The first argument is a game object reference (which
 * allows us to get a reference to SDriver), and the second is a QStringList
 * of possible filenames to play.
 * @code
 *  PLAY_SFX(tower_, SfxManager::projectileFireArrow);
 * @endcode
 * The more SFX that are currently playing, the lower the gain will be for this
 * SFX.
 *
 * To create a network message to play a notification (a SFX that should always 
 * be played at full gain), use the following macro. The first argument is a 
 * game object reference (which allows us to get a reference to SDriver), and 
 * the second is a QStringList of possible filenames to play.
 * @code
 *  PLAY_NOTIFY(tower_, SfxManager::towerBuildingStarted);
 * @endcode
 *
 * @author Dean Morin
 */
class SfxManager {

public:
    // projectile fires
    static QStringList projectileFireArrow;
    static QStringList projectileFireCannon;
    static QStringList projectileFireFlame;
    static QStringList projectileFireTar;
    static QStringList projectileFireFlak;

    // projectile lands
    static QStringList projectileHitArrow;
    static QStringList projectileHitCannon;
    static QStringList projectileHitFlame;
    static QStringList projectileHitTar;
    static QStringList projectileHitFlak;

    // tower SFX
    static QStringList towerBuildingStarted;
    static QStringList towerBuildingFinished;
    static QStringList towerLevelUp;
    static QStringList towerSold;

    // menu SFX
    static QStringList contextMenuOpened;
    static QStringList contextMenuClosed;
    static QStringList contextMenuSelect;
    static QStringList contextMenuNotEnoughGems;

    // NPC wave entrance
    static QStringList npcPterodactylEnters;

    // NPC death 
    static QStringList npcPterodactylDies;

    //Game sounds
    static QStringList winTheGame;
    static QStringList loseTheGame;
    static QStringList npcInBase;

    // resource picked up
    static QStringList resourceWood;
    static QStringList resourceStone;
    static QStringList resourceBone;
    static QStringList resourceTar;

    // player SFX
    static QStringList playerOpensMenu;
    static QStringList playerSelectsMenuItem;
    static QStringList playerLevelsUp;
    static QStringList playerHitsNpc;
    
    //lobby SFX
    static QStringList lobbyStart;
    static QStringList lobbySingle;
    static QStringList lobbyMulti;
    static QStringList lobbyConnect;

    /**
     * Randomly selects a filename from sfxList, and writes a network message
     * that will tell the clients to play that SFX.
     *
     * @author Dean Morin
     * @param gameObject Used to get a reference to the driver.
     * @param sfxList A list of SFX that can be used in this situation.
     * @param type The type of SFX (regular, or notification).
     */
    static void makeSfxNetworkMsg(QObject* gameObject, 
            QStringList sfxList, int type=0);
};

} // end namespace td

#endif

